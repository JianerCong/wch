syntax = "proto3";
package hiPb;

service Greeter {
  rpc AddTxs(Txs) returns (AddTxsReply) {}
}

message AddTxReply {
  bytes hash = 1;
  bytes deployed_addr = 2;
}

message AddTxsReply {
  repeated AddTxReply txs = 1;
}

message Acn {
  uint64 nonce = 1;
  bytes code = 2;
  // bytes codehash = 3; // ðŸ¦œ Nope , not needed in pb, it's json only (for show)
  /*
    ðŸ¦œ : Because pb doesn't allow bytes as key, we kinda have to store the kv
    separately... So we used the following for storage, which is map<byte32, byte32>
   */
  repeated bytes storage_ks = 3;
  repeated bytes storage_vs = 4;
  repeated string disk_storage = 5;
  /*
    ðŸ¦œ : After some serious thinking, we decided to use string for disk_storage,
    because usually it needs to be readble in json....
   */
} // []

enum TxType{EVM = 0; DATA = 1;}

message Tx {
  TxType type = 1;
  bytes from_addr = 2;
  bytes to_addr = 3;
  bytes data = 4;
  uint64 timestamp = 5;         // [not needed in rpc]
  uint64 nonce = 6;
  // bytes hash = 7;
  //<2024-02-06 Tue>: ðŸ¦œ : Nope, not needed in pb, we only store it in json.

  // ðŸ¦œ : The following 3 are optional in rpc param
  string pk_pem = 7;
  bytes signature = 8;          // key.sign(hash)
  bytes pk_crt = 9;            // ca_key.sign(pk_pem)
}                               // [x]

message Txs {repeated Tx txs = 1;} // [x]

message BlkHeader {uint64 number = 1; bytes parentHash = 2;}

message Blk {BlkHeader header = 1; repeated Tx txs = 2;} // [x]

message BlkForConsensus {BlkHeader header = 1; repeated bytes txhs = 2;}
message TxOnBlkInfo {uint64 blkNumber = 1; uint64 onBlkId = 2;} // [x]
message StateChange {bool del = 1; bytes k = 2; bytes v = 3;} // [x]
message StateChanges {repeated StateChange changes = 1;}            // [x]

message TxReceipt {bool ok = 1; bytes result = 2;} // [x]

// executed Blk
message ExecBlk {
  Blk blk = 1;
  repeated TxReceipt txReceipts = 2;
  repeated StateChanges stateChanges = 3;
} // [x]
